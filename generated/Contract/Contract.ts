// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SchemaRegistered extends ethereum.Event {
  get params(): SchemaRegistered__Params {
    return new SchemaRegistered__Params(this);
  }
}

export class SchemaRegistered__Params {
  _event: SchemaRegistered;

  constructor(event: SchemaRegistered) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }

  get tags(): Array<string> {
    return this._event.parameters[2].value.toStringArray();
  }

  get schemaUID(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get resolver(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get attestResolutionDays(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get schema(): string {
    return this._event.parameters[6].value.toString();
  }

  get mintPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get attestReward(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get isMintable(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class schemaSubscription extends ethereum.Event {
  get params(): schemaSubscription__Params {
    return new schemaSubscription__Params(this);
  }
}

export class schemaSubscription__Params {
  _event: schemaSubscription;

  constructor(event: schemaSubscription) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get schemaUID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get subscriptionEndAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__resolverSchemaInfoResult {
  value0: Bytes;
  value1: boolean;
  value2: BigInt;

  constructor(value0: Bytes, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getSchemaUID(): Bytes {
    return this.value0;
  }

  getIsMintable(): boolean {
    return this.value1;
  }

  getMintPrice(): BigInt {
    return this.value2;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hasAccess(schemaUID: Bytes, sender: Address): boolean {
    let result = super.call("hasAccess", "hasAccess(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(schemaUID),
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_hasAccess(
    schemaUID: Bytes,
    sender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAccess",
      "hasAccess(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasAttestAccess(schemaUID: Bytes, sender: Address): boolean {
    let result = super.call(
      "hasAttestAccess",
      "hasAttestAccess(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasAttestAccess(
    schemaUID: Bytes,
    sender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAttestAccess",
      "hasAttestAccess(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRevokeAccess(schemaUID: Bytes, sender: Address): boolean {
    let result = super.call(
      "hasRevokeAccess",
      "hasRevokeAccess(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasRevokeAccess(
    schemaUID: Bytes,
    sender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasRevokeAccess",
      "hasRevokeAccess(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onlyAllowedTokens(schemaUID: Bytes): boolean {
    let result = super.call(
      "onlyAllowedTokens",
      "onlyAllowedTokens(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(schemaUID)]
    );

    return result[0].toBoolean();
  }

  try_onlyAllowedTokens(schemaUID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onlyAllowedTokens",
      "onlyAllowedTokens(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(schemaUID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  resolverSchemaInfo(param0: Address): Contract__resolverSchemaInfoResult {
    let result = super.call(
      "resolverSchemaInfo",
      "resolverSchemaInfo(address):(bytes32,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__resolverSchemaInfoResult(
      result[0].toBytes(),
      result[1].toBoolean(),
      result[2].toBigInt()
    );
  }

  try_resolverSchemaInfo(
    param0: Address
  ): ethereum.CallResult<Contract__resolverSchemaInfoResult> {
    let result = super.tryCall(
      "resolverSchemaInfo",
      "resolverSchemaInfo(address):(bytes32,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__resolverSchemaInfoResult(
        value[0].toBytes(),
        value[1].toBoolean(),
        value[2].toBigInt()
      )
    );
  }

  splitterFactory(): Address {
    let result = super.call(
      "splitterFactory",
      "splitterFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_splitterFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "splitterFactory",
      "splitterFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userSubscriptions(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userSubscriptions",
      "userSubscriptions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userSubscriptions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userSubscriptions",
      "userSubscriptions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _schemaRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _implementationAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _thirdwebFactoryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _splitterAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateSuperSchemaCall extends ethereum.Call {
  get inputs(): CreateSuperSchemaCall__Inputs {
    return new CreateSuperSchemaCall__Inputs(this);
  }

  get outputs(): CreateSuperSchemaCall__Outputs {
    return new CreateSuperSchemaCall__Outputs(this);
  }
}

export class CreateSuperSchemaCall__Inputs {
  _call: CreateSuperSchemaCall;

  constructor(call: CreateSuperSchemaCall) {
    this._call = call;
  }

  get tokenGateAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get enumsIDs(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get tokenIDs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _schemaInput(): CreateSuperSchemaCall_schemaInputStruct {
    return changetype<CreateSuperSchemaCall_schemaInputStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class CreateSuperSchemaCall__Outputs {
  _call: CreateSuperSchemaCall;

  constructor(call: CreateSuperSchemaCall) {
    this._call = call;
  }

  get resolver(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get schemaUID(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class CreateSuperSchemaCall_schemaInputStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get tags(): Array<string> {
    return this[2].toStringArray();
  }

  get attestResolutionDays(): BigInt {
    return this[3].toBigInt();
  }

  get schema(): string {
    return this[4].toString();
  }

  get mintPrice(): BigInt {
    return this[5].toBigInt();
  }

  get attestReward(): BigInt {
    return this[6].toBigInt();
  }

  get isMintable(): boolean {
    return this[7].toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get schemaUID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get months(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}
